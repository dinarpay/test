import subprocess
import asyncio
from tqdm import tqdm

async def run_svmap(ip_range, output_file):
    command = f"python svmap.py {ip_range} -t0.0 -p6069,5060,6072,5038,7777,5001,3030,6036,5061,1025,6060,3075,6073,7073,6079,6099,6089,5059,5260,5070,5069,6655,5080,5062,15060,6050,6051,5063,5064,5065,5067,5068,5071,5072,5073,5076,5075,5077,5078,1020,5079,1021,1022,1023,6052,6053,6054,6055,6057,6058,6059,6061,6062,6063,6070,6064,6080,6010,5090,5566,9060,4002,5678,5088,6020,5600,5160,9090,5506,5000,5002,5098,5099,5100,6088,6090,14310,1153,10243,4569,8080,5723,1024,1026,1029,1030,10000,10001,10002,10009,10010,7060,8060,7061,8061,9061,2000,2001,2002,2020,2021,3478,13000,13001,4379,4380,27000,27001,27030,27031,27036,16384,16385,16399,16400,9000,9001,9002,9049,9050,3722,3723,3729,3730,1234,1235,1236,1237,5009,5190,5297,5353,6802,10602,10600,6250,1720,3230,3231,3237,8000,8001,8002,8003,8004,8005 -v --randomize"
    with open(output_file, "a") as f:
        proc = await asyncio.create_subprocess_shell(command, stdout=f, shell=True)
        await proc.wait()

async def main():
    input_file = "ip.txt"
    output_file = "SIPresults.txt"
    ranges = []
    with open(input_file, "r") as f:
        ranges = f.readlines()

    batch_size = 10
    for i in range(0, len(ranges), batch_size):
        batch = ranges[i:i + batch_size]
        tasks = []
        with tqdm(total=len(batch), desc=f"Batch {i//batch_size + 1}", unit="range") as pbar:
            for r in batch:
                task = asyncio.ensure_future(run_svmap(r.strip(), output_file))
                task.add_done_callback(lambda x: pbar.update(1))
                tasks.append(task)

            await asyncio.gather(*tasks)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    loop.close()
